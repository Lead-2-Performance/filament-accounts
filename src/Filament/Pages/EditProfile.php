<?php

namespace TomatoPHP\FilamentAccounts\Filament\Pages;

use Filament\Forms\Concerns\InteractsWithForms;
use Filament\Forms\Contracts\HasForms;
use Filament\Forms\Form;
use Filament\Pages\Page;
use Illuminate\Database\Eloquent\Model;
use TomatoPHP\FilamentAccounts\Forms\BrowserSessionsForm;
use TomatoPHP\FilamentAccounts\Forms\CustomFieldsForm;
use TomatoPHP\FilamentAccounts\Forms\DeleteAccountForm;
use TomatoPHP\FilamentAccounts\Forms\EditPasswordForm;
use TomatoPHP\FilamentAccounts\Forms\EditProfileForm;
use App\Filament\App\Pages\Exception;
use Filament\Actions\Action;
use Filament\Facades\Filament;
use Filament\Notifications\Notification;
use Filament\Support\Exceptions\Halt;
use Illuminate\Contracts\Auth\Authenticatable;

class EditProfile extends \Filament\Pages\Auth\EditProfile implements HasForms
{
    use InteractsWithForms;

    protected static string $view = 'filament-accounts::teams.edit-profile';

    public static function shouldRegisterNavigation(): bool
    {
        return false;
    }

    public function getTitle(): string
    {
        return  trans('filament-accounts::messages.title');
    }

    public static function getNavigationLabel(): string
    {
        return  trans('filament-accounts::messages.title');
    }

    public static function canAccess(): bool
    {
        return true;
    }

    public static function shouldShowDeleteAccountForm()
    {
        return true;
    }

    public static function shouldShowBrowserSessionsForm()
    {
        return true;
    }

    public static function shouldShowSanctumTokens()
    {
        return true;
    }

    public static function isSimple(): bool
    {
        return parent::isSimple(); // TODO: Change the autogenerated stub
    }

    public ?array $profileData = [];

    public ?array $passwordData = [];

    public ?array $customFieldsData = [];

    public function mount(): void
    {
        $this->fillForms();
    }

    protected function getForms(): array
    {
        return [
            'editProfileForm',
            'editPasswordForm',
            'deleteAccountForm',
            'customFieldsForm',
            'browserSessionsForm',
        ];
    }

    public function editProfileForm(Form $form): Form
    {
        return $form
            ->schema(EditProfileForm::get())
            ->model($this->getUser())
            ->statePath('profileData');
    }

    public function editPasswordForm(Form $form): Form
    {
        return $form
            ->schema(EditPasswordForm::get())
            ->model($this->getUser())
            ->statePath('passwordData');
    }

    public function deleteAccountForm(Form $form): Form
    {
        return $form
            ->schema(DeleteAccountForm::get())
            ->model($this->getUser())
            ->statePath('deleteAccountData');
    }

    public function browserSessionsForm(Form $form): Form
    {
        return $form
            ->schema(BrowserSessionsForm::get());
    }

    public function customFieldsForm(Form $form): Form
    {
//        if (config('filament-edit-profile.show_custom_fields') && ! empty(config('filament-edit-profile.custom_fields'))) {
//            return $form
//                ->schema(CustomFieldsForm::get(config('filament-edit-profile.custom_fields')))
//                ->model($this->getUser())
//                ->statePath('customFieldsData');
//        }

        return $form
            ->schema([])
            ->model($this->getUser())
            ->statePath('customFieldsData');
    }

    protected function fillForms(): void
    {
        $data = $this->getUser()->attributesToArray();

        $this->editProfileForm->fill($data);
        $this->editPasswordForm->fill();

//        if (config('filament-edit-profile.show_custom_fields') && ! empty(config('filament-edit-profile.custom_fields'))) {
//            $this->customFieldsForm->fill($data['custom_fields'] ?? []);
//        }
    }

    protected function getUpdateProfileFormActions(): array
    {
        return [
            Action::make('updateProfileAction')
                ->label(trans('filament-accounts::messages.save'))
                ->submit('editProfileForm'),
        ];
    }

    protected function getUpdatePasswordFormActions(): array
    {
        return [
            Action::make('updatePasswordAction')
                ->label(trans('filament-accounts::messages.save'))
                ->submit('editPasswordForm'),
        ];
    }

    protected function getUpdateCustomFieldsFormActions(): array
    {
        return [
            Action::make('updateCustomFieldsAction')
                ->label(trans('filament-accounts::messages.save'))
                ->submit('editCustomFieldsForm'),
        ];
    }

    public function updateProfile(): void
    {
        try {
            $data = $this->editProfileForm->getState();

            $this->handleRecordUpdate($this->getUser(), $data);
        } catch (Halt $exception) {
            return;
        }

        $this->sendSuccessNotification();
    }

    public function updatePassword(): void
    {
        try {
            $data = $this->editPasswordForm->getState();

            $this->handleRecordUpdate($this->getUser(), $data);
        } catch (Halt $exception) {
            return;
        }

        if (request()->hasSession() && array_key_exists('password', $data)) {
            request()->session()->put([
                'password_hash_' . Filament::getAuthGuard() => $data['password'],
            ]);
        }

        $this->editPasswordForm->fill();

        $this->sendSuccessNotification();
    }

    public function updateCustomFields(): void
    {
        try {
            $data = $this->customFieldsForm->getState();
            $data['custom_fields'] = $data ?? [];

            $customFields['custom_fields'] = $data['custom_fields'];
            $this->handleRecordUpdate($this->getUser(), $customFields);
        } catch (Halt $exception) {
            return;
        }

        $this->sendSuccessNotification();
    }

    protected function handleRecordUpdate(Model $record, array $data): Model
    {
        $record->update($data);

        return $record;
    }

    private function sendSuccessNotification(): void
    {
        Notification::make()
            ->success()
            ->title(trans('filament-accounts::messages.saved_successfully'))
            ->send();

        redirect(request()?->header('Referer'));
    }
}
